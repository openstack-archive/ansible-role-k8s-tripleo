- name: Create puppet-apply configmap
  ignore_errors: yes
  k8s_v1_config_map:
    host: "{{coe_host}}"
    context: "{{coe_config_context}}"
    kubeconfig: "{{coe_config_file}}"
    name: '{{service_name}}-puppet-apply'
    namespace: "{{namespace}}"
    state: present
    labels:
      service: "{{service_name}}"
    data:
      # NOTE(flaper87): This script won't be needed
      # in ansible 2.5
      upload-cm.py: |-
        import argparse
        import logging
        import os

        from kubernetes import client, config

        LOG = logging.getLogger(__name__)
        FORMAT = '%(asctime)s %(levelname)-8s %(name)-15s %(message)s'
        logging.basicConfig(format=FORMAT)
        LOG.setLevel(logging.INFO)


        def get_args():
            description = 'Create and Update configmaps for dirs'
            parser = argparse.ArgumentParser(description)

            parser.add_argument('--debug', action='store_true',
                                dest='debug', help='Enable debug')
            parser.add_argument('--replace', action='store_true',
                                dest='cm_replace', help=('Replace existing ConfigMap. '
                                                         'Existing configmaps will be '
                                                         'patched otherwise.'))
            parser.add_argument('--cm-name', required=True,
                                dest='cm_name', help='Configmap name')
            parser.add_argument('--cm-namespace', required=True,
                                dest='cm_namespace', help='Configmap namespace')
            parser.add_argument('-d', '--dirs', action='append', default=[],
                                dest='dirs', help='Dirs to upload')
            parser.add_argument('-p', '--paths', action='append', default=[],
                                dest='paths', help='File to upload')
            args = parser.parse_args()
            return args


        def main():
            args = get_args()

            if args.debug:
                LOG.setLevel(logging.DEBUG)

            try:
                config.load_incluster_config()
            except config.config_exception.ConfigException:
                config.load_kube_config()

            paths = args.paths[:]

            for d in args.dirs:
                for path in os.listdir(d):
                    path = os.path.join(d, path)
                    if os.path.isdir(path):
                        LOG.info("Ignoring subdir %s: no recursion supported" % path)
                        continue
                    paths.append(path)

            data = {}
            for path in paths:
                path = os.path.abspath(path)

                if not os.path.exists(path):
                    LOG.info("Ignoring path %s: It doesn't exist" % path)
                    continue

                with open(path, 'r') as f:
                    data[os.path.basename(path)] = f.read()
                LOG.debug("Read contents for %s" % path)

            metadata = {'name': args.cm_name,
                        'namespace': args.cm_namespace}

            cm = client.V1ConfigMap()
            cm.metadata = metadata
            cm.data = data

            v1 = client.CoreV1Api()

            try:
                if args.cm_replace:
                    cm = v1.replace_namespaced_config_map(args.cm_name,
                                                          args.cm_namespace,
                                                          body=cm)
                    LOG.info("Configmap %s replaced" % args.cm_name)

                else:
                    cm = v1.patch_namespaced_config_map(args.cm_name,
                                                        args.cm_namespace,
                                                        body=cm)
                    LOG.info("Configmap %s updated" % args.cm_name)
            except client.rest.ApiException as exc:
                if not exc.status == 404:
                    raise exc

                cm = v1.create_namespaced_config_map(args.cm_namespace, body=cm)
                LOG.info("Configmap %s created" % args.cm_name)


        if __name__ == '__main__':
            main()

      config.pp: |-
        include ::tripleo::packages

        {{step_config}}
      playbook.yaml: |-
        - hosts: localhost
          gather_facts: no
          connection: local
          tasks:
            - name: Remove /etc/puppet/ssl
              file:
                path: /etc/puppet/ssl
                state: absent
            - name: Write /etc/puppet/hieradata/docker.json
              copy:
                content: '{"step": 6}'
                dest: "/etc/puppet/hieradata/docker.json"
                mode: 0755
            - name: Run puppet apply
              shell:
                cmd: |-
                  /usr/bin/puppet apply --detailed-exitcodes --color=false --logdest syslog --logdest console --tags {{tags}} config.pp
                  rc=$?
                  if [ $rc -ne 2 -a $rc -ne 0 ]; then
                    exit $rc
                  fi

                executable: /bin/bash
                chdir: '{%raw%}{{playbook_dir}}{%endraw%}'
              environment:
                FACTER_hostname: "{{service_name}}"
                FACTER_uuid: docker

            - name: Run configmap uploader
              shell:
                cmd: |-
                  /usr/bin/python upload-cm.py --debug --cm-name {%raw%}{{item.key}}{%endraw%} --cm-namespace {{namespace}} -d {%raw%}{{item.value}}{%endraw%}

                executable: /bin/bash
                chdir: '{%raw%}{{playbook_dir}}{%endraw%}'
              with_dict:
                {{puppet_apply_collect_dirs | to_yaml}}

- name: Run puppet-apply
  k8s_v1_job:
    host: "{{coe_host}}"
    context: "{{coe_config_context}}"
    kubeconfig: "{{coe_config_file}}"
    name: '{{service_name}}-puppet-apply'
    namespace: "{{namespace}}"
    state: present
    restart_policy: OnFailure
    labels:
      service: "{{service_name}}"
    containers:
      - image: "{{service_image}}"
        name: '{{service_name}}-puppet-apply'
        command:
          - 'ansible-playbook'
          - '-vvvv'
          - '/var/lib/puppet-apply/playbook.yaml'
        volume_mounts: &volume_mounts
          - name: playbook
            mountPath: /var/lib/puppet-apply/
    volumes:
      - name: playbook
        config_map:
          name: '{{service_name}}-puppet-apply'
